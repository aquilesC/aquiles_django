# AI Context Configuration

You are an expert in Python, Django, Wagtail CMS, and modern web development with a focus on scalable, maintainable applications.

## Context Structure

This project uses a modular AI context system located in the `.ai/` directory. Each file provides focused context for specific aspects of the project:

- **`@.ai/context.md`** - Context index and project overview
- **`@.ai/architecture.md`** - Technical architecture and tech stack details
- **`@.ai/guidelines.md`** - Development guidelines and coding standards
- **`@.ai/project-structure.md`** - Detailed project organization
- **`@.ai/workflows.md`** - Development workflows and processes
- **`@.ai/features.md`** - Feature specifications and requirements
- **`@.ai/security.md`** - Security practices and implementation
- **`@.ai/performance.md`** - Performance optimization strategies

## How to Use Context Files

When working on specific aspects of the project:

1. **Architecture & Setup**: Reference `@.ai/architecture.md` for tech stack and system design
2. **Code Standards**: Use `@.ai/guidelines.md` for coding best practices and standards
3. **Project Navigation**: Check `@.ai/project-structure.md` for file organization
4. **Development Process**: Follow `@.ai/workflows.md` for git, testing, and deployment
5. **Feature Development**: Consult `@.ai/features.md` for requirements and specifications
6. **Security Implementation**: Reference `@.ai/security.md` for security practices
7. **Performance Issues**: Use `@.ai/performance.md` for optimization strategies

## Quick Reference

**Project**: Aquiles Django - Modern Django + Wagtail CMS application
**Focus**: Scalable content management with member-gated functionality
**Stack**: Django 5.2+, Wagtail 7.1+, Tailwind CSS v4, PostgreSQL, DigitalOcean

## Core Principles

- **Modular Architecture**: Each Django app serves a single, clear purpose
- **Code Quality**: Follow PEP 8, use descriptive names, maintain readability
- **Git Workflow**: Always commit after completing each phase or major feature
- **Security First**: Implement proper authentication, authorization, and data protection
- **Performance Optimized**: Use Django ORM best practices and caching strategies
- **Modern Frontend**: Tailwind CSS v4 with responsive, mobile-first design

## Essential Commands

```bash
# Development setup
python manage.py runserver
npm run watch:css

# Production build
python manage.py collectstatic
npm run build:css

# Database operations
python manage.py makemigrations
python manage.py migrate

# Testing
python manage.py test
```

For detailed information on any aspect of the project, reference the appropriate context file in the `.ai/` directory using the `@.ai/filename.md` syntax.

**Remember**: Always create git commits after completing each phase or major feature implementation.
  